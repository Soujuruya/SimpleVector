[1mdiff --git a/SimpleVector.cpp b/SimpleVector.cpp[m
[1mindex 8b13789..6341eb5 100644[m
[1m--- a/SimpleVector.cpp[m
[1m+++ b/SimpleVector.cpp[m
[36m@@ -1 +1,32 @@[m
[32m+[m[32m#include "SimpleVector.hpp"[m
 [m
[32m+[m[32m// –ö–æ–ø–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ[m
[32m+[m[32mSimpleVector& SimpleVector::operator=(const SimpleVector& other){[m
[32m+[m[32m    if (this == &other){ // —Å–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ[m
[32m+[m[32m        return *this;[m
[32m+[m[32m    }[m[41m [m
[32m+[m
[32m+[m[32m    SimpleVector temp(other); // —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏[m
[32m+[m
[32m+[m[32m    swap(*this,temp); // —Å–≤–∞–ø–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è[m
[32m+[m
[32m+[m[32m    return *this; // –≤–æ–∑—Ä–∞—â–∞–µ–º[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//   –ü–µ—Ä–µ–º–µ—â–∞—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ[m[41m [m
[32m+[m[32mSimpleVector& SimpleVector::operator=(SimpleVector &&other) noexcept[m
[32m+[m[32m{[m
[32m+[m[32m    if(this != &other){[m
[32m+[m[32m        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã[m
[32m+[m[32m        delete[] data_;[m[41m [m
[32m+[m[32m        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã other[m
[32m+[m[32m        data_ = other.data_;[m[41m [m
[32m+[m[32m        size_ = other.size_;[m
[32m+[m[32m        capacity_ = other.capacity_;[m
[32m+[m[32m        // –û–±–Ω—É–ª—è–µ–º other[m
[32m+[m[32m        other.data_ = nullptr;[m
[32m+[m[32m        other.size_ = other.capacity_ = 0;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return *this;[m
[32m+[m[32m}[m
[1mdiff --git a/SimpleVector.hpp b/SimpleVector.hpp[m
[1mindex e69de29..cdc4ece 100644[m
[1m--- a/SimpleVector.hpp[m
[1m+++ b/SimpleVector.hpp[m
[36m@@ -0,0 +1,93 @@[m
[32m+[m[32m#ifndef SIMPLEVECTOR_HPP[m
[32m+[m[32m#define SIMPLEVECTOR_HPP[m
[32m+[m
[32m+[m[32m#include <cstddef>    // –î–ª—è size_t[m
[32m+[m[32m#include <algorithm> // std::copy[m
[32m+[m
[32m+[m[32mclass SimpleVector{[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[41m    [m
[32m+[m[32m    //–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é[m
[32m+[m[32m    SimpleVector()[m[41m [m
[32m+[m[32m        : data_(nullptr),[m
[32m+[m[32m        size_(0),[m
[32m+[m[32m        capacity_(0)[m[41m [m
[32m+[m[32m    {}[m
[32m+[m
[32m+[m[32m    //–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É count[m
[32m+[m[32m    explicit SimpleVector(size_t count)[m[41m [m
[32m+[m[32m        : data_(count ? new int[count] : nullptr),[m
[32m+[m[32m          size_(count),[m
[32m+[m[32m          capacity_(count)[m[41m [m
[32m+[m
[32m+[m[32m    {[m
[32m+[m[32m      for (size_t i = 0;i < size_;i++){[m
[32m+[m[32m        data_[i] = 0;[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    //–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è[m
[32m+[m
[32m+[m[32m    SimpleVector(const SimpleVector& other)[m
[32m+[m[32m        : data_(nullptr),[m
[32m+[m[32m        size_(0),[m
[32m+[m[32m        capacity_(0)[m
[32m+[m[32m    {[m
[32m+[m[32m        if(other.size_ > 0 && other.data_){[m
[32m+[m[32m            data_ = new (std::nothrow) int[other.capacity_]; // std::nothrow —Ñ–ª–∞–≥,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ new –ø—Ä–∏ –æ—à–∏–±–∫–µ[m
[32m+[m[32m            //–û–±—ã—á–Ω—ã–π new –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ std::bad_alloc –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏[m
[32m+[m[32m            //new —Å std::nothrow –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullptr –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è[m
[32m+[m[32m            if (!data_){[m
[32m+[m[32m                throw std::bad_alloc();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            std::copy(other.data_,other.data_ + other.size_, data_); // –æ—Ç–∫—É–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º,—á—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º,–∫—É–¥–∞.[m
[32m+[m[32m            size_ = other.size_;[m
[32m+[m[32m            capacity_ = other.capacity_;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    //Move-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä[m
[32m+[m[32m    SimpleVector(SimpleVector&& other) noexcept[m[41m [m
[32m+[m[32m        : data_(other.data_),[m
[32m+[m[32m          size_(other.size_),[m
[32m+[m[32m          capacity_(other.capacity_)[m
[32m+[m
[32m+[m[32m    {[m
[32m+[m[32m        other.data_ = nullptr;[m
[32m+[m[32m        other.size_ = other.capacity_ = 0;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    //–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è[m
[32m+[m[32m    SimpleVector& operator=(const SimpleVector& other);[m
[32m+[m
[32m+[m[32m    //Move-–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è[m
[32m+[m[32m    SimpleVector& operator=(SimpleVector&& other) noexcept;[m
[32m+[m
[32m+[m[32m    //–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä[m
[32m+[m[32m    ~SimpleVector()[m[41m [m
[32m+[m[32m    {[m
[32m+[m[32m        delete[] data_; // –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ delete –±–µ–∑ [] –ø—Ä–∏–≤—ë–ª –±—ã –∫ —É—Ç–µ—á–∫–µ –ø–∞–º—è—Ç–∏!!![m
[32m+[m[32m        // –ò –æ–±–Ω—É–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å,–Ω–æ —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ,—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ.[m
[32m+[m[32m        size_ = capacity_ = 0;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    //Swap-—Ñ—É–∫–Ω—Ü–∏—è[m
[32m+[m
[32m+[m[32m    friend void swap(SimpleVector& a, SimpleVector& b) noexcept {[m
[32m+[m[32m        using std::swap;[m
[32m+[m[32m        swap(a.data_, b.data_);[m
[32m+[m[32m        swap(a.size_, b.size_);[m
[32m+[m[32m        swap(a.capacity_, b.capacity_);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m
[32m+[m[32m    //–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞[m
[32m+[m[32m    int* data_;[m
[32m+[m[32m    size_t size_;[m
[32m+[m[32m    size_t capacity_;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // SIMPLEVECTOR_HPP[m
